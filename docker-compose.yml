version: '3.8'

services:
  # Elasticsearch Service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: docuscan-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - docuscan-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: docuscan-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - docuscan-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # FastAPI Backend Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: docuscan-backend
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - PYTHONUNBUFFERED=1
      - TESSERACT_CMD=/usr/bin/tesseract
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./demo_data:/app/demo_data
      - ./temp:/app/temp
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - docuscan-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # React Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: docuscan-frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
    depends_on:
      - backend
    networks:
      - docuscan-network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: docuscan-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - docuscan-network
    restart: unless-stopped

volumes:
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local

networks:
  docuscan-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 